rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isRole(role) {
      return isSignedIn() && getUserData(request.auth.uid).role == role;
    }

    function isStudent() {
      return isRole('student');
    }

    function isTeacher() {
      return isRole('teacher');
    }

    function isAdmin() {
      return isRole('admin');
    }

    function isStaff() {
      return isTeacher() || isAdmin();
    }

    // Collection Rules
    match /users/{userId} {
      // Allow a user to read their own profile or any profile if they are staff.
      allow read: if request.auth.uid == userId || isStaff();
      // Allow any signed-in user to list users (for directory, etc.)
      allow list: if isSignedIn();
      // Allow a user to update their own profile, but not change their role.
      // Allow staff to update any user's profile.
      // A server-side process with no auth can also update users (for point increments).
      allow update: if request.auth.uid == userId || isStaff() || request.auth == null;
      // Allow anyone to create a user document (signup)
      allow create: if true;

      match /points/{pointId} {
        // Only the server flow (request.auth == null) or staff can create/update/delete point entries.
        allow write: if isStaff() || request.auth == null;
        // Students can read their own points, staff can read any.
        allow read: if request.auth.uid == userId || isStaff();
      }
    }
    
    match /attendance/{attendanceId} {
        // Any signed in user can create an attendance record.
        allow create: if isSignedIn();
        // Only staff can read attendance records.
        allow read, list: if isStaff();
    }

    match /announcements/{announcementId} {
      // Any signed in user can read/list announcements. The app's query filters by generation.
      allow read: if isSignedIn();
      allow write, delete: if isStaff();
    }

    match /assignments/{assignmentId} {
      // Any signed in user can read/list assignments. The app's query filters by generation.
      allow read: if isSignedIn();
      allow write, delete: if isStaff();
    }
    
    match /exercises/{exerciseId} {
      // Any signed in user can read/list exercises. The app's query filters by generation.
      allow read: if isSignedIn();
      allow write, delete: if isStaff();
    }
    
    match /projects/{projectId} {
      // Any signed in user can read/list projects. The app's query filters by generation.
      allow read: if isSignedIn();
      allow write, delete: if isStaff();
    }
    
    match /submissions/{submissionId} {
      allow read: if isStaff() || request.auth.uid == resource.data.studentId;
      // Allow staff to list all submissions.
      allow list: if isStaff();
      // A user can create a submission for themselves, or a staff member can create one.
      allow create: if isStaff() || request.auth.uid == request.resource.data.studentId;
      // Staff or a server-side flow can update submissions with grades/feedback
      allow update: if isStaff() || request.auth == null;
      allow delete: if isStaff();
    }
    
    match /resources/{resourceId} {
      allow read: if isSignedIn();
      allow write, delete: if isStaff();
    }
    
    match /materials/{materialId} {
      allow read: if isSignedIn();
      allow write, delete: if isStaff();
    }

    match /roadmap_status/{weekId} {
      allow read: if isSignedIn();
      allow write: if isStaff();
    }

    match /notifications/{notificationId} {
        // A user can only read/write their own notifications
        allow read, write: if request.auth.uid == resource.data.userId;
        // Staff can create notifications for other users through a server-side flow.
        allow create: if isStaff() || request.auth == null;
        // A user can list their own notifications
        allow list: if isSignedIn() && request.query.filters.length > 0 && request.query.filters[0].value == request.auth.uid;
    }

    match /chats/{chatId}/{message=**} {
      allow read, write: if isSignedIn();
    }
  }
}