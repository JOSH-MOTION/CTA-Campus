rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Default deny all reads and writes to ensure security.
    match /{document=**} {
      allow read, write: if false;
    }

    // USER PROFILES
    match /users/{userId} {
      // Any authenticated user can read public profile information.
      allow read: if isAuthenticated();
      // A user can only create or update their own profile document.
      allow write: if request.auth.uid == userId;
    }

    // ANNOUNCEMENTS, ASSIGNMENTS, PROJECTS, EXERCISES, RESOURCES, MATERIALS
    // These collections have similar rules: anyone can read, only teachers/admins can write.
    match /announcements/{docId} {
      allow read: if isAuthenticated();
      // Allow write if the user's role in the database is teacher or admin.
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }
    match /assignments/{docId} {
      allow read: if isAuthenticated();
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }
    match /projects/{docId} {
      allow read: if isAuthenticated();
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }
    match /exercises/{docId} {
      allow read: if isAuthenticated();
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }
    match /resources/{docId} {
      allow read: if isAuthenticated();
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }
    match /materials/{docId} {
      allow read: if isAuthenticated();
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }

    // SUBMISSIONS
    match /submissions/{submissionId} {
      // Allow a user to create a submission only if they are the studentId in the document.
      allow create: if isAuthenticated() && request.resource.data.studentId == request.auth.uid;
      // Allow teachers/admins to read any submission. A student can read their own.
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'] || resource.data.studentId == request.auth.uid;
      // Only allow teachers/admins to delete.
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }
    
    // ROADMAP STATUS
    match /roadmap_status/{weekId} {
      // Any authenticated user can read the status.
      allow read: if isAuthenticated();
      // Only teachers/admins can change the completion status.
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }

    // NOTIFICATIONS & POINTS (User-specific subcollections)
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write, delete: if request.auth.uid == userId;
    }
    
    // CHATS
    match /chats/{chatId}/messages/{messageId} {
        // For simplicity, allow any authenticated user to read/write messages.
        // In a production app, you'd add a 'members' array to the chat document
        // and check if request.auth.uid is in that list.
        allow read, write, delete: if isAuthenticated();
    }
  }
}
