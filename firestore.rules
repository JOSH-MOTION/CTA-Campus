rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isTeacher() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read/write their own data, teachers/admins have broader access
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isTeacher() || isAdmin();
      
      // Points can be read by owner, teachers, or admins.
      // Points can only be created/updated/deleted by teachers or admins.
      match /points/{pointId} {
        allow read: if isOwner(userId) || isTeacher() || isAdmin();
        allow create, update, delete: if isTeacher() || isAdmin();
      }
    }

    // Announcements
    match /announcements/{announcementId} {
        allow read: if request.auth != null;
        allow write: if isTeacher() || isAdmin();
    }
    
    // Assignments, Exercises, Projects, Resources, Materials
    match /{collectionName}/{docId} where collectionName in ['assignments', 'exercises', 'projects', 'resources', 'materials'] {
        allow read: if request.auth != null;
        allow write: if isTeacher() || isAdmin();
    }

    // Submissions
    match /submissions/{submissionId} {
        allow create: if isOwner(request.resource.data.studentId);
        allow read: if isOwner(request.resource.data.studentId) || isTeacher() || isAdmin();
        allow delete: if isTeacher() || isAdmin();
        // Students should not be able to update their submissions.
        allow update: if isTeacher() || isAdmin();
    }

    // Chats
    match /chats/{chatId}/{message=**} {
      // For now, allow any authenticated user to read/write to any chat.
      // More granular rules can be added later if needed (e.g., based on chat members).
      allow read, write: if request.auth != null;
    }

    // Notifications
    match /notifications/{notificationId} {
      // Users can only read and update (mark as read) their own notifications.
      // Creation is handled by server-side logic (flows/notifications).
      allow read, update: if isOwner(request.resource.data.userId);
      allow create, delete: if false; // Disallow client-side creation/deletion
    }
    
    // Roadmap Status
    match /roadmap_status/{weekId} {
        // All authenticated users can read the roadmap status
        allow read: if request.auth != null;
        // Only teachers and admins can update the roadmap status
        allow write: if isTeacher() || isAdmin();
    }
  }
}
