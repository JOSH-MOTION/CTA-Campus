rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check the role of the requesting user.
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isStudent() {
      return isRole('student');
    }

    function isTeacher() {
      return isRole('teacher');
    }

    function isAdmin() {
      return isRole('admin');
    }

    function isStaff() {
        return isTeacher() || isAdmin();
    }

    function userGen() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gen;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn();
      
      // Allow users to update their own profile, but not their role or points.
      // Allow staff to update any profile.
      allow update: if (request.auth.uid == userId && !('role' in request.resource.data) && !('totalPoints' in request.resource.data)) || isStaff();
      
      // Allow creation of user docs during signup
      allow create: if isSignedIn();
      
      // Points subcollection rules
      match /points/{pointId} {
        // Only staff can manage point entries to ensure integrity.
        allow read, write: if isStaff();
        // Allow a user to create a point entry if it's an increment, handled by server-side flow.
        allow create: if request.auth.uid == userId;
      }
    }
    
    // Generic function to check if a document is targeted to the current user
    function isTargeted(resource) {
        return resource.data.targetGen == 'Everyone' || 
               resource.data.targetGen == 'All Students' || 
               (isStudent() && resource.data.targetGen == userGen());
    }

    match /announcements/{announcementId} {
        allow read: if isStaff() || isTargeted(resource);
        allow write: if isStaff();
    }

    match /assignments/{assignmentId} {
        allow read: if isStaff() || isTargeted(resource);
        allow write: if isStaff();
    }
    
    match /exercises/{exerciseId} {
        allow read: if isStaff() || isTargeted(resource);
        allow write: if isStaff();
    }
    
    match /projects/{projectId} {
        allow read: if isStaff() || isTargeted(resource);
        allow write: if isStaff();
    }
    
    match /submissions/{submissionId} {
        allow list: if isStaff();
        allow read: if request.auth.uid == resource.data.studentId || isStaff();
        allow create: if request.auth.uid == request.resource.data.studentId || isStaff();
        allow delete: if isStaff();
    }
    
    match /resources/{resourceId} {
        allow read: if isSignedIn();
        allow write: if isStaff();
    }
    
    match /materials/{materialId} {
        allow read: if isSignedIn();
        allow write: if isStaff();
    }

    match /roadmap_status/{weekId} {
        allow read: if isSignedIn();
        allow write: if isStaff();
    }

    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }

    match /chats/{chatId}/{message=**} {
      allow read, write: if isSignedIn();
    }
  }
}
