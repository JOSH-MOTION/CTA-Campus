rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection rules
    match /users/{userId} {
      // Any authenticated user can get a single user's public data
      allow get: if request.auth != null;

      // Users can update their own document
      allow update: if request.auth.uid == userId;
      
      // Any authenticated user can list users (for directory, chat, etc.)
      allow list: if request.auth != null;

      // Anyone can create a user during sign-up
      allow create: if true;
    }
    
    // Materials collection rules
    match /materials/{materialId} {
      // Teachers and admins can create materials
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
      
      // Any authenticated user can read materials
      allow read: if request.auth != null;
    }

    // Announcements, Assignments, Exercises, Projects
    match /{collection}/{docId} where collection in ['announcements', 'assignments', 'exercises', 'projects'] {
       allow read: if request.auth != null;
       allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
       allow update, delete: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || request.auth.uid == resource.data.authorId);
    }

    // Chat collection rules
    match /chats/{chatId}/messages/{messageId} {
      // Allow read if the user is part of the chat.
      allow read: if request.auth != null && (isMemberOfDm(chatId) || isMemberOfGroup(chatId));

      // Allow create if the user is part of the chat.
      allow create: if request.auth != null && (isMemberOfDm(chatId) || isMemberOfGroup(chatId));
      
      // Allow update and delete ONLY if the user is the original sender of the message.
      allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
    }
  }

  // Helper function to check if a user is in a DM chat
  function isMemberOfDm(chatId) {
    return request.auth.uid in chatId.split('-');
  }

  // Helper function to check if a user belongs to a group chat.
  function isMemberOfGroup(chatId) {
    // This check is simplified. A robust implementation would use custom claims in the auth token.
    // For now, we assume if it's a group chat, the user's client-side logic has already determined access.
    // The create/read rules above will gate access.
    let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;

    // Admins and teachers can access any group chat
    if (userDoc.role in ['admin', 'teacher']) {
      return true;
    }
    // Students can only access their own generation's group chat
    return userDoc.role == 'student' && chatId == 'group-' + userDoc.gen;
  }
}
