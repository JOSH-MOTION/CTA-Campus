
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isStudent() {
      return isRole('student');
    }

    function isTeacher() {
      return isRole('teacher');
    }

    function isAdmin() {
      return isRole('admin');
    }

    function isStaff() {
      return isTeacher() || isAdmin();
    }

    function userGen() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gen;
    }

    function isTargeted(resource) {
        return resource.data.targetGen == 'Everyone' || 
               resource.data.targetGen == 'All Students' || 
               (isStudent() && resource.data.targetGen == userGen());
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isSignedIn();
      
      // A user can update their own profile, but cannot change their role or total points.
      allow update: if request.auth.uid == userId &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.totalPoints == resource.data.totalPoints;

      // Staff can update any user's profile information.
      allow update: if isStaff();
      
      // Staff can update a user's total points. This is the crucial rule for grading.
      allow update: if isStaff() &&
                       'totalPoints' in request.resource.data &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['totalPoints']);

      match /points/{pointId} {
        // Only staff can create/write point entries. This is handled by the secure flow.
        allow write: if isStaff();
        // Students can read their own points, staff can read any.
        allow read: if request.auth.uid == userId || isStaff();
        // Only staff can delete point entries.
        allow delete: if isStaff();
      }
    }

    match /announcements/{announcementId} {
      allow read: if isStaff() || isTargeted(resource);
      allow write, delete: if isStaff();
    }

    match /assignments/{assignmentId} {
      allow read: if isStaff() || isTargeted(resource);
      allow write, delete: if isStaff();
    }
    
    match /exercises/{exerciseId} {
      allow read: if isStaff() || isTargeted(resource);
      allow write, delete: if isStaff();
    }
    
    match /projects/{projectId} {
      allow read: if isStaff() || isTargeted(resource);
      allow write, delete: if isStaff();
    }
    
    match /submissions/{submissionId} {
      allow read: if isStaff() || request.auth.uid == resource.data.studentId;
      // Allow staff to list all submissions. This is crucial for the submissions page.
      allow list: if isStaff();
      // A user can create a submission for themselves, or a staff member can create one.
      allow create: if isStaff() || request.auth.uid == request.resource.data.studentId;
      allow delete: if isStaff();
    }
    
    match /resources/{resourceId} {
      allow read: if isSignedIn();
      allow write, delete: if isStaff();
    }
    
    match /materials/{materialId} {
      allow read: if isSignedIn();
      allow write, delete: if isStaff();
    }

    match /roadmap_status/{weekId} {
      allow read: if isSignedIn();
      allow write: if isStaff();
    }

    match /notifications/{notificationId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }

    match /chats/{chatId}/{message=**} {
      allow read, write: if isSignedIn();
    }
  }
}
