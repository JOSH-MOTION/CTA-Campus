
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles from their document in the 'users' collection.
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // It's important to only get data from trusted paths.
    // This function securely gets the user's data document.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Checks if the requesting user has a specific role.
    function isRole(role) {
      return isAuth() && getUserData(request.auth.uid).role == role;
    }
    
    // Checks if the requesting user has one of the specified roles.
    function isOneOfRoles(roles) {
        return isAuth() && getUserData(request.auth.uid).role in roles;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can read their own document.
      // An admin can read any user's document.
      allow read: if isUser(userId) || isRole('admin');
      
      // A user can update their own document.
      allow update: if isUser(userId);

      // Rules for the 'points' subcollection within each user document
      match /points/{pointId} {
        // Teachers and admins can create (award) and delete (revoke) points for any user.
        // A student can only read their own points. They cannot create or delete them directly.
        allow read: if isUser(userId) || isOneOfRoles(['admin', 'teacher']);
        allow create, delete: if isOneOfRoles(['admin', 'teacher']);
      }
      
       // Rules for the 'notifications' subcollection within each user document
      match /notifications/{notificationId} {
        // A user can read and update (e.g., mark as read) their own notifications.
        allow read, update: if isUser(userId);
        // Notifications are created by the server/secure functions, so client-side creation is disallowed.
        allow create, delete: if false;
      }
    }

    // Rules for shared collections
    match /announcements/{announcementId} {
      // Any authenticated user can read announcements.
      allow read: if isAuth();
      // Only admins and teachers can create, update, or delete announcements.
      allow write: if isOneOfRoles(['admin', 'teacher']);
    }

    match /assignments/{assignmentId} {
        allow read: if isAuth();
        allow write: if isOneOfRoles(['admin', 'teacher']);
    }
    
    match /exercises/{exerciseId} {
        allow read: if isAuth();
        allow write: if isOneOfRoles(['admin', 'teacher']);
    }
    
    match /projects/{projectId} {
        allow read: if isAuth();
        allow write: if isOneOfRoles(['admin', 'teacher']);
    }
    
    match /resources/{resourceId} {
        allow read: if isAuth();
        allow write: if isOneOfRoles(['admin', 'teacher']);
    }
    
    match /materials/{materialId} {
        allow read: if isAuth();
        allow write: if isOneOfRoles(['admin', 'teacher']);
    }
    
    match /roadmap_status/{weekId} {
        allow read: if isAuth();
        allow write: if isOneOfRoles(['admin', 'teacher']);
    }
    
    // Rules for submissions
    match /submissions/{submissionId} {
      // Users can only create their own submissions.
      allow create: if isAuth() && request.resource.data.studentId == request.auth.uid;
      // Admins and teachers can read any submission. Students can read their own.
      allow read: if isAuth() && (isOneOfRoles(['admin', 'teacher']) || resource.data.studentId == request.auth.uid);
      // Only admins and teachers can delete submissions.
      allow delete: if isOneOfRoles(['admin', 'teacher']);
      allow update: if false; // Submissions should be immutable.
    }
    
    // Rules for chats
    match /chats/{chatId}/messages/{messageId} {
        // For one-on-one chats (DM), the chat ID is '{userId1}-{userId2}'
        // For group chats, the chat ID is 'group-{genName}'
        
        function isDmMember() {
            let userIds = chatId.split('-');
            return request.auth.uid in userIds;
        }
        
        function isGroupMember() {
            let genName = chatId.split('-')[1];
            // Check if the user is a teacher/admin or a student of that generation
            return isOneOfRoles(['admin', 'teacher']) || (isRole('student') && getUserData(request.auth.uid).gen == genName);
        }

        // Allow read/write if the user is a member of the DM or the group chat.
        allow read, write: if isAuth() && (chatId.startsWith('group-') ? isGroupMember() : isDmMember());
    }
  }
}
