rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for teacher or admin role
    function isTeacherOrAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role in ['teacher', 'admin'];
    }

    // Users can read/update their own data. Any authenticated user can read public profiles.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Public content readable by any authenticated user, writable only by teachers/admins.
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow write: if isTeacherOrAdmin(request.auth.uid);
    }

    match /assignments/{assignmentId} {
      allow read: if request.auth != null;
      allow write: if isTeacherOrAdmin(request.auth.uid);
    }
    
    match /exercises/{exerciseId} {
      allow read: if request.auth != null;
      allow write: if isTeacherOrAdmin(request.auth.uid);
    }

    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow write: if isTeacherOrAdmin(request.auth.uid);
    }

    match /resources/{resourceId} {
      allow read: if request.auth != null;
      allow write: if isTeacherOrAdmin(request.auth.uid);
    }
    
    match /materials/{materialId} {
        allow read: if request.auth != null;
        allow write: if isTeacherOrAdmin(request.auth.uid);
    }

    // Submissions can be created by the student, but only read/deleted by teachers/admins.
    match /submissions/{submissionId} {
      allow read: if isTeacherOrAdmin(request.auth.uid);
      allow create: if request.auth.uid == request.resource.data.studentId;
      allow delete: if isTeacherOrAdmin(request.auth.uid);
      allow update: if false; // Submissions should not be updatable
    }

    // Users can only manage their own points.
    match /users/{userId}/points/{pointId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // Users can only manage their own AI chat history
    match /users/{userId}/ai-chat-history/{messageId} {
        allow read, write, delete: if request.auth.uid == userId;
    }

    // Notifications are specific to each user.
    match /notifications/{notificationId} {
      allow read, write: if request.auth.uid == request.resource.data.userId;
    }
    
    // Roadmap status is read-only for students, writable for teachers/admins
    match /roadmap_status/{weekId} {
        allow read: if request.auth != null;
        allow write: if isTeacherOrAdmin(request.auth.uid);
    }

    // Chat messages are readable/writable by participants.
    // For DMs (e.g., 'uid1-uid2'), check if the user is one of the two.
    // For group chats (e.g., 'group-Gen30'), we'll need a more complex rule,
    // but for now, we will allow any authenticated user to read/write to any group chat.
    // A production app would lock this down further with user roles/group memberships.
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth != null;
    }
  }
}
