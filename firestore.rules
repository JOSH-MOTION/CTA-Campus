rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's role from the 'users' collection
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }

    // Helper function to check if a user is a teacher
    function isTeacher(userId) {
      return getUserRole(userId) == 'teacher';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles (for directory, etc.)
      allow read: if isAuthenticated();
      // A user can only create or update their own profile
      allow write: if request.auth.uid == userId;

      // Rule for the 'points' subcollection when accessed directly
      match /points/{pointId} {
         allow read, write: if isAuthenticated() && (request.auth.uid == userId || isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      }
    }
    
    // This rule is required for the collectionGroup query in getPointsForAllStudents
    match /{path=**}/points/{pointId} {
      allow read: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /announcements/{docId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow update, delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin(request.auth.uid));
    }

    match /assignments/{docId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow update, delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin(request.auth.uid));
    }
    
    match /exercises/{docId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow update, delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin(request.auth.uid));
    }
    
    match /projects/{docId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow update, delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin(request.auth.uid));
    }
    
    // Rules for the 'materials' collection
    match /materials/{materialId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
        allow update, delete: if false; // Disallow client-side updates/deletes
    }

    // Rules for the 'chats' collection
    match /chats/{chatId}/messages/{messageId} {
        // Allow read/create if the user's ID is in the DM chat ID, or if it's a group chat.
        allow read, create: if isAuthenticated() && 
                            (request.auth.uid in chatId.split('-') || 
                             (chatId.startsWith('group-') && getUserRole(request.auth.uid) != null));
                             
        // Allow update/delete only if the user is the sender of the message.
        allow update, delete: if isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/chats/$(chatId)/messages/$(messageId)).data.senderId;
    }
  }
}
