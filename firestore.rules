rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isStudent(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'student';
    }

    function isTeacher(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'teacher';
    }

    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId || isAdmin(request.auth.uid);
    }
    
    match /announcements/{announcementId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /assignments/{assignmentId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /exercises/{exerciseId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /projects/{projectId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /materials/{materialId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /submissions/{submissionId} {
        allow read: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid) || get(resource.data.studentId) == request.auth.uid);
        allow create: if isAuthenticated() && request.resource.data.studentId == request.auth.uid;
        allow delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /{path=**}/points/{pointId} {
      allow read: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid) || path[1] == request.auth.uid);
      allow create: if isAuthenticated();
    }
    
    match /chats/{chatId}/{message=**} {
        allow read, write: if isAuthenticated();
    }

    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
  }
}
