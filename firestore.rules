
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check the role of the requesting user.
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isStudent() {
      return isRole('student');
    }

    function isTeacher() {
      return isRole('teacher');
    }

    function isAdmin() {
      return isRole('admin');
    }
    
    function isStaff() {
        return isTeacher() || isAdmin();
    }

    function userGen() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gen;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn();
      // Students can update their own profile, but not their role or totalPoints.
      // Staff can update any user document.
      allow update: if (request.auth.uid == userId && 
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.totalPoints == resource.data.totalPoints) || isStaff();
                       
      allow create: if request.auth.uid == userId;

      // Rules for the 'points' subcollection within each user document.
      match /points/{pointId} {
        // Only staff can write to the points subcollection.
        // The awardPointsFlow is a server-side operation which has admin-like privileges
        // and is not restricted by these client-side rules for writes.
        // Students can read their own points history.
        allow read: if request.auth.uid == userId || isStaff();
        allow write, delete: if isStaff();
      }
    }
    
    // Rules for top-level collections (announcements, assignments, etc.)
    
    // Generic function to check if a document is targeted to the current user
    function isTargeted(resource) {
        return resource.data.targetGen == 'Everyone' || 
               resource.data.targetGen == 'All Students' || 
               (isStudent() && resource.data.targetGen == userGen());
    }

    match /announcements/{announcementId} {
        allow read: if isTeacher() || isAdmin() || isTargeted(resource);
        allow write, delete: if isTeacher() || isAdmin();
    }

    match /assignments/{assignmentId} {
        allow read: if isTeacher() || isAdmin() || isTargeted(resource);
        allow write, delete: if isTeacher() || isAdmin();
    }
    
    match /exercises/{exerciseId} {
        allow read: if isTeacher() || isAdmin() || isTargeted(resource);
        allow write, delete: if isTeacher() || isAdmin();
    }
    
    match /projects/{projectId} {
        allow read: if isTeacher() || isAdmin() || isTargeted(resource);
        allow write, delete: if isTeacher() || isAdmin();
    }
    
    match /submissions/{submissionId} {
        // A user can read their own submission. Teachers/admins can read any submission.
        allow read: if request.auth.uid == resource.data.studentId || isStaff();
        // A user can create a submission for themselves. Teachers/admins can delete them.
        allow create: if request.auth.uid == request.resource.data.studentId;
        allow delete: if isStaff();
    }
    
    match /resources/{resourceId} {
        allow read: if isSignedIn();
        allow write, delete: if isStaff();
    }
    
    match /materials/{materialId} {
        allow read: if isSignedIn();
        allow write, delete: if isStaff();
    }

    match /roadmap_status/{weekId} {
        allow read: if isSignedIn();
        allow write: if isStaff();
    }

    match /notifications/{notificationId} {
        allow read: if request.auth.uid == resource.data.userId || isStaff();
        allow write: if isStaff(); // Only staff can create/update notifications directly
        allow create: if request.auth.uid == request.resource.data.userId; // user can trigger creation for self
        allow update: if request.auth.uid == resource.data.userId; // user can update (e.g. mark as read)
    }

    // Rules for chat collections
    match /chats/{chatId}/{message=**} {
      // For now, allow any signed-in user to read/write to any chat.
      // In a production app, you would add more granular checks here
      // to ensure a user is actually part of the chat.
      allow read, write: if isSignedIn();
    }
  }
}
