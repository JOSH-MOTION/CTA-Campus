rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isStudent(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'student';
    }

    function isTeacher(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'teacher';
    }

    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId || isAdmin(request.auth.uid);
    }
    
    match /announcements/{announcementId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /assignments/{assignmentId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /exercises/{exerciseId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /projects/{projectId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /materials/{materialId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /submissions/{submissionId} {
        // A user can read a submission if they are a teacher/admin, or if they are the student who made the submission.
        allow read: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid) || resource.data.studentId == request.auth.uid);
        // Students can only create submissions for themselves.
        allow create: if isAuthenticated() && request.resource.data.studentId == request.auth.uid;
        // Teachers/admins can delete submissions.
        allow delete: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /notifications/{notificationId} {
      // Users can only access their own notifications
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }

    match /users/{userId}/points/{pointId} {
      // Points can be read by teachers/admins (for rankings) and by the student themselves.
      allow read: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid) || userId == request.auth.uid);
      // For this app, we trust the client-side logic under the assumption that an admin or teacher is performing the action
      // or the point award logic is secured (e.g. idempotency check in awardPoint)
      allow create, delete: if isAuthenticated();
    }
    
    match /chats/{chatId}/{message=**} {
        allow read, write: if isAuthenticated();
    }

    match /roadmap_status/{weekId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
  }
}
