'use client';

import {useState} from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import {Button} from '@/components/ui/button';
import {Bot, Sparkles, Loader2, ServerCrash} from 'lucide-react';
import {summarizeResource} from '@/ai/flows/resource-summarizer';
import {Alert, AlertDescription, AlertTitle} from '@/components/ui/alert';

export function Summarizer({content}: {content: string}) {
  const [summary, setSummary] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [isOpen, setIsOpen] = useState(false);

  const handleSummarize = async () => {
    setError('');
    setIsLoading(true);
    setSummary('');

    try {
      const result = await summarizeResource({resourceText: content});
      setSummary(result.summary);
    } catch (e) {
      console.error(e);
      setError('Failed to generate summary. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const onOpenChange = (open: boolean) => {
    setIsOpen(open);
    if (open) {
      handleSummarize();
    } else {
      setSummary('');
      setError('');
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>
        <Button className="w-full bg-primary hover:bg-primary/90">
          <Sparkles className="mr-2 h-4 w-4" />
          Summarize
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Bot /> AI Summary
          </DialogTitle>
          <DialogDescription>A quick TL;DR of the resource, generated by AI.</DialogDescription>
        </DialogHeader>
        <div className="py-4 min-h-[100px] flex items-center justify-center">
          {isLoading && (
            <div className="flex flex-col items-center justify-center space-y-2">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <p className="text-muted-foreground">Generating summary...</p>
            </div>
          )}
          {error && (
            <Alert variant="destructive">
              <ServerCrash className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {summary && <p className="text-sm leading-relaxed">{summary}</p>}
        </div>
        <DialogFooter>
          <Button type="button" variant="secondary" onClick={() => setIsOpen(false)}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
